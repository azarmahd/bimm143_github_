---
title: "Class 5: Data Visualization with ggplot"
author: "Arshiya Zarmahd (PID: A16247996)"
format: pdf
toc: true
---

Today we will have our first play with the **ggplot2** package - one of the most popular graphics packages on the planet.

There are many plotting systems in R. These include so called *"base"* plotting/graphics. 

```{r}
plot(cars)
```

Base plot is generally rather short code and somewhat dull plots - but it is always there for you and is fast for big datasets. 


If I want to use **ggplot2** it takes some more work.

```{r}
# ggplot(cars)
```

I need to install the package first to my computer. To do this, I can use the function `install.packages("ggplot2")`

Every time I want to use a package, I have to load it up with a `library()` call.

```{r}
library(ggplot2)
```

Now I can finally use ggplot.

```{r}
ggplot(cars)
```

Every ggplot has at least 3 things: 

- **Data**: the data.frame with the data you want to plot
- **Aes**: the aesthetic mapping of the data to the plot
- **Geom**: how you want the plot to look, ie. points, lines, columns, etc.

```{r}
head(cars)
```

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth() 
```

I want a linear model and no standard error bounds shown on my plot. I also want nicer axis labels, a title, etc. 

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth(se=FALSE, method="lm") +
  labs(title="Stopping Distance of Old Cars",
       x="Speed (MPH)",
       y="Distance (ft)",
       caption="From the cars dataset") +
  theme_bw()
```

## A More Complicated Scatter Plot

Here we make a plot of gene expression data:

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
```

```{r}
head(genes)
```

```{r}
round(sum(genes$State == "up") / nrow(genes) *100 , 2)
```

```{r}
n.gene <- nrow(genes)
n.up <- sum(genes$State == "up")

up.percent <- n.up/n.gene * 100
round(up.percent, 2)
```

```{r}
head(genes, 2)
```

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point()
```

Change the colors and labelling. 

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point() +
  scale_color_manual( values=c("blue","gray","red") ) +
  labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment (drug)")
```

## Exploring the Gapminder Dataset

Here we will load up the gapminder dataset to get practice with different aes mappings. 

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

> Q. How many entries rows are in this dataset?

```{r}
nrow(gapminder)
```

> Q. How many columns?

```{r}
ncol(gapminder)
```

```{r}
dim(gapminder)
```

```{r}
head(gapminder)
```

```{r}
table(gapminder$year)
```

> Q. How many continents are there in this dataset?

```{r}
table(gapminder$continent)
```

I could use the `unique()` function...

```{r}
unique(gapminder$continent)
```

```{r}
length(unique(gapminder$continent))
```

> Q. How many countires are there in this dataset?

```{r}
length(unique(gapminder$country))
```

```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp, col=continent) + 
  geom_point(alpha=0.4)
```

2007 dataset.

```{r}
library(dplyr)

gapminder_2007 <- filter (gapminder, year==2007)

head(gapminder_2007)
```

Plot of 2007 with population and continent data.

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp) + 
  geom_point() + 
  facet_wrap(~continent)
```




