---
title: "Class 8: Breast Cancer Mini-Project"
author: "Arshiya Zarmahd (PID: A16247996)"
format: pdf
---

## About

In today's lab we will work with fine needle aspiration (FNA) of breast mass data from the University of Wisconsin. 

## Data Import

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
head(wisc.df)
```

> Q1. How many observations/patients/individuals/samples are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
# 1 way to do this is:
sum(wisc.df$diagnosis == "M")

# Another way to get this value is:
table(wisc.df$diagnosis)
```

> Q3. How many variables/features in the data are suffixed with `_mean`?

```{r}
ncol(wisc.df)
```

```{r}
colnames(wisc.df)
```

```{r}
inds <- grep("_mean", colnames(wisc.df))
length(inds)
```

```{r}
grep("_mean", colnames(wisc.df), value=T)
```
## Initial Analysis

Before analysis, I want to take out the expert diagnoses column (aka, the answer) from our dataset. 

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

```{r}
wisc.data <- wisc.df[,-1]
```










## Clustering

We can try `kmeans()` clustering first.

```{r}
km <- kmeans(wisc.data, centers=2)
table(km$cluster)
```

Cross-Table

```{r}
table(km$cluster, diagnosis)
```

Lets try `hclust()`. The key input required for `hclust()` is a distance matrix as produced by the `dist()` function. 

```{r}
hc <- hclust(dist(wisc.data))
```

```{r}
plot(hc)
```

## PCA 

Do we need to scale the data?

We can look at the standard deviation of each column (original variable).

```{r}
round( apply(wisc.data, 2, sd) )
```

Yes, we need to scale. We will run `prcomp()` with `scale=TRUE`.

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
summary(wisc.pr)
```

Generate our main PCA plot (score plot, PC1 vs PC2 plot).

```{r}
library(ggplot2)

res <- as.data.frame(wisc.pr$x)
```

```{r}
ggplot(res) + 
  aes(PC1, PC2, col=diagnosis) +
  geom_point()
```

## Combining Methods

Clustering on PCA results

```{r}
d <- dist(wisc.pr$x[,1:3])
```

Using the minimum number of principal components required to describe at least 90% of the variability in the data, create a hierarchical clustering model with the linkage `method="ward.D2"`. We use Wardâ€™s criterion here because it is based on multidimensional variance like principal components analysis. Assign the results to `wisc.pr.hclust`.

```{r}
d <- dist(wisc.pr$x[,1:3])
hc <- hclust(d, method="ward.D2")
plot(hc)
```

To get my clustering result/membership vector, I need to "cut" the tree with the `cutree()` function.

```{r}
grps <- cutree(hc, k=2)
```

> Q. How many patients are in each cluster group?

```{r}
table(grps)
```

```{r}
plot(res$PC1, res$PC2, col=grps)
```

## Prediction

We can use our PCA result (model) to do our predictions. That is, take new unseen data and project it onto our new PC variables. 

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(res$PC1, res$PC2, col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], labels=c(1,2), col="white")
```

# Summary

Principle Component Analysis (PCA) is a super useful method for analyzing large datasets. It works by finding new variables (PCs) that capture the most variance from the original variables in your dataset. 



























